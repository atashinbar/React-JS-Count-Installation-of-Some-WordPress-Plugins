{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["jsonp","require","App","props","state","main_data","err","data","console","error","message","setState","event","map","e","name","id","width","height","xtitle","ytitle","download","curve","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6SAIIA,G,MAAQC,EAAQ,KAECC,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,UAAY,CACV,CAAE,KAAQ,MAAO,KAAQ,CAAE,aAAc,EAAG,aAAc,IAC1D,CAAE,KAAQ,MAAO,KAAQ,CAAE,aAAc,EAAG,aAAc,IAC1D,CAAE,KAAQ,QAAS,KAAQ,CAAE,aAAc,EAAG,aAAc,IAC5D,CAAE,KAAQ,WAAY,KAAQ,CAAE,aAAc,EAAG,aAAc,IAC/D,CAAE,KAAQ,eAAgB,KAAQ,CAAE,aAAc,EAAG,aAAc,MARtD,E,sMAgBjBL,EAAM,qGAAsG,MAAM,SAACM,EAAKC,GAClHD,EACFE,QAAQC,MAAMH,EAAII,SAElB,EAAKC,UAAS,SAAAC,GAOZ,OANAA,EAAMP,UAAUQ,KAAI,SAAAC,GAIlB,MAHe,QAAXA,EAAEC,OACJD,EAAEP,KAAOA,IAEJ,MAEF,QAKbP,EAAM,6FAA8F,MAAM,SAACM,EAAKC,GAC1GD,EACFE,QAAQC,MAAMH,EAAII,SAElB,EAAKC,UAAS,SAAAC,GAOZ,OANAA,EAAMP,UAAUQ,KAAI,SAAAC,GAIlB,MAHe,QAAXA,EAAEC,OACJD,EAAEP,KAAOA,IAEJ,MAEF,QAKbP,EAAM,+FAAgG,MAAM,SAACM,EAAKC,GAC5GD,EACFE,QAAQC,MAAMH,EAAII,SAElB,EAAKC,UAAS,SAAAC,GAOZ,OANAA,EAAMP,UAAUQ,KAAI,SAAAC,GAIlB,MAHe,UAAXA,EAAEC,OACJD,EAAEP,KAAOA,IAEJ,MAEF,QAKbP,EAAM,mGAAoG,MAAM,SAACM,EAAKC,GAChHD,EACFE,QAAQC,MAAMH,EAAII,SAElB,EAAKC,UAAS,SAAAC,GAOZ,OANAA,EAAMP,UAAUQ,KAAI,SAAAC,GAIlB,MAHe,aAAXA,EAAEC,OACJD,EAAEP,KAAOA,IAEJ,MAEF,QAKbP,EAAM,wFAAyF,MAAM,SAACM,EAAKC,GACrGD,EACFE,QAAQC,MAAMH,EAAII,SAElB,EAAKC,UAAS,SAAAC,GAOZ,OANAA,EAAMP,UAAUQ,KAAI,SAAAC,GAIlB,MAHe,iBAAXA,EAAEC,OACJD,EAAEP,KAAOA,IAEJ,MAEF,Q,gIAQb,OACE,6BACE,kBAAC,IAAD,CAAWS,GAAG,cAAcC,MAAM,MAAMC,OAAO,OAAOC,OAAO,OAAOC,OAAO,YAAYC,UAAU,EAAMC,OAAO,EAAQf,KAAMgB,KAAKnB,MAAMC,iB,GAtG9GmB,aCMbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.493dbc78.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { LineChart } from 'react-chartkick';\nimport 'chart.js';\nvar jsonp = require('jsonp'); \n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      main_data : [\n        { \"name\": \"mec\", \"data\": { \"2017-01-01\": 3, \"2017-01-02\": 4 } },\n        { \"name\": \"tec\", \"data\": { \"2017-01-01\": 5, \"2017-01-02\": 3 } },\n        { \"name\": \"10web\", \"data\": { \"2017-01-01\": 5, \"2017-01-02\": 3 } },\n        { \"name\": \"allinone\", \"data\": { \"2017-01-01\": 5, \"2017-01-02\": 3 } },\n        { \"name\": \"eventmanager\", \"data\": { \"2017-01-01\": 5, \"2017-01-02\": 3 } }\n      ]\n    }\n    \n  }\n  async componentDidMount() {\n\n\n    jsonp('https://api.wordpress.org/stats/plugin/1.0/downloads.php?slug=modern-events-calendar-lite&limit=30', null, (err, data) => {\n      if (err) {\n        console.error(err.message);\n      } else {\n        this.setState(event => {\n          event.main_data.map(e => {\n            if (e.name === 'mec'){\n              e.data = data;\n            }\n            return true;\n          })\n          return true;\n        });\n      }\n    });\n\n    jsonp('https://api.wordpress.org/stats/plugin/1.0/downloads.php?slug=the-events-calendar&limit=30', null, (err, data) => {\n      if (err) {\n        console.error(err.message);\n      } else {\n        this.setState(event => {\n          event.main_data.map(e => {\n            if (e.name === 'tec'){\n              e.data = data;\n            }\n            return true;\n          })\n          return true;\n        });\n      }\n    });\n\n    jsonp('https://api.wordpress.org/stats/plugin/1.0/downloads.php?slug=spider-event-calendar&limit=30', null, (err, data) => {\n      if (err) {\n        console.error(err.message);\n      } else {\n        this.setState(event => {\n          event.main_data.map(e => {\n            if (e.name === '10web'){\n              e.data = data;\n            }\n            return true;\n          })\n          return true;\n        });\n      }\n    });\n\n    jsonp('https://api.wordpress.org/stats/plugin/1.0/downloads.php?slug=all-in-one-event-calendar&limit=30', null, (err, data) => {\n      if (err) {\n        console.error(err.message);\n      } else {\n        this.setState(event => {\n          event.main_data.map(e => {\n            if (e.name === 'allinone'){\n              e.data = data;\n            }\n            return true;\n          })\n          return true;\n        });\n      }\n    });\n\n    jsonp('https://api.wordpress.org/stats/plugin/1.0/downloads.php?slug=events-manager&limit=30', null, (err, data) => {\n      if (err) {\n        console.error(err.message);\n      } else {\n        this.setState(event => {\n          event.main_data.map(e => {\n            if (e.name === 'eventmanager'){\n              e.data = data;\n            }\n            return true;\n          })\n          return true;\n        });\n      }\n    });\n\n  }\n  render() {\n    //console.log(this.state.main_data)\n    return (\n      <div>\n        <LineChart id=\"users-chart\" width=\"90%\" height=\"90vh\" xtitle=\"Date\" ytitle=\"Downloads\" download={true} curve={false}  data={this.state.main_data} />\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}